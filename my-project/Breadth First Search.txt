#include<iostream>
#include<queue>
using namespace std;

struct BstNode
{
	int data;
	BstNode* left;
	BstNode* right;
};


BstNode* GetNewNode(int data)
{
	BstNode* newNode = new BstNode();  
	newNode -> data = data;
	newNode ->left = NULL;
	newNode ->right = NULL;
	return newNode;
}

BstNode* Insert (BstNode* root , int data)
{
	if(root== NULL)
	{
		root = GetNewNode(data);
		return root;
	}
	else if(data <= root->data)
	{
		root ->left = Insert(root-> left , data);
	}
	else
	{
		root ->right = Insert(root -> right, data); 
	}
	return root;

}


void Insert(BstNode** root , int data)
{
	if(*root == NULL)
	{
		*root = GetNewNode(data);
	}
}

bool breadth_first_search(BstNode* ptr, int N)
{
	if(N==ptr->data)
		return true;

	else
	{
		queue <BstNode*> q;


		if(ptr->left != NULL)
			q.push (ptr->left);

		if(ptr->right !=NULL)
			q.push(ptr->right);

		BstNode* temp;

		while(!q.empty())
		{
			temp = q.front();

		if(temp->data==N)
			return true;

		else
		{
			if(temp->left !=NULL)
				q.push(temp->left);

			if(temp->right!=NULL)
				q.push(temp->right);

			q.pop();

		}
		}

		return false;
	}
}
int main()
{
	BstNode* root= NULL;
	root = Insert(root,100);
	root = Insert(root,70);
	root = Insert(root,150);
	root = Insert(root,60);
	root = Insert(root,90);
	root = Insert(root,140);
	root = Insert(root,170);
	root = Insert(root,50);
	root = Insert(root,65);
	root = Insert(root,80);
	root = Insert(root,95);
	root = Insert(root,160);
	root = Insert(root,180);
	int num;
	cout<<"Enter number to find in tree using BFS method = \t " << "\n";
	cin>> num;


	bool b= breadth_first_search(root, num);

	if(b)
		cout <<"\n Num is found in Tree \n ";
	else
		cout <<"\n Num is Not found \n";

	system("pause");


}
  


